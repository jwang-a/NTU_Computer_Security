import hashlib
import sys
import binascii
import struct
import string

def md5(s):
    return hashlib.md5(s.encode('ascii')).hexdigest()

a = int('''
d3d36115599d53eeb0413c3a818e120bc1ce4cc9bca9e7b23a695a150c056c4a
6ca2e3ce99efe8a0f4385e86e8897d2e47bd25a45e723b768af040e2b6d73beb
193fb86aae849513463e3a794768ab865b4b82bd5df627e83afdfc0ee00bc983
2e6c38e53d2812a344ff34008198e142e642c95a449a762d7fd30df018fa5fe6
53c882a192d011594a29a0926fe841473622a61e41ac0f675f5fda76a27561ff
c7c90c6d85464f23fab9e88bfca8ed5a0f2e0e11c0a0f4521e1919194e868d18
c0d33f5fdc0cb95793ca96f7b8a7127cb9ae6acde7e158bcf718cf30ea69933e
f6cdefa6f9383f8c9735f9510f70f228d299479a257c1a2d3c10d1f47cc1a055
'''.replace('\n', ''), 16)

b = int('''
e5b537e60922d57a763918a5b1e8af1bc07c85fefea11e8179f2a9ee6cf7c611
7d0eba7963617035cf1ddb1f0cc858d70890a76990f96adb29ea8b0403f869cd
be51b76f06c25a9319ecd04366f846338fc1f81ae05f143940039bfbbc4de953
b933c89e74fe62485157d7a3b31993915808a4b95bb768f369818c10edfa561e
3530c999c33ef62a4466ec67622cc12525cf0ea3d402931d16ef115acc172641
a63037190ba04931d3caa2ef861ee7f277647844f8a7f94569f06cea32badb02
82355467cec0bdbdff5e7cd837ffce048925280ab92a9560c1cd6bd309239d7e
72b298af5ad81d27ee9adf7143185815bdadfa21296833149748ed2f55343533
'''.replace('\n', ''), 16) * a

init_b = int('''
e5b537e60922d57a763918a5b1e8af1bc07c85fefea11e8179f2a9ee6cf7c611
7d0eba7963617035cf1ddb1f0cc858d70890a76990f96adb29ea8b0403f869cd
be51b76f06c25a9319ecd04366f846338fc1f81ae05f143940039bfbbc4de953
b933c89e74fe62485157d7a3b31993915808a4b95bb768f369818c10edfa561e
3530c999c33ef62a4466ec67622cc12525cf0ea3d402931d16ef115acc172641
a63037190ba04931d3caa2ef861ee7f277647844f8a7f94569f06cea32badb02
82355467cec0bdbdff5e7cd837ffce048925280ab92a9560c1cd6bd309239d7e
72b298af5ad81d27ee9adf7143185815bdadfa21296833149748ed2f55343533
'''.replace('\n', ''), 16)

A = b'''
bc69f315c01224ca6778d124281a31f5ffaf7e97ef666f349fb6c6d390e1bd2b
4ece1d956c577f57920ff9a082b6855ea9a99914f21491b4012cad5aecb93c44
c0b1cabd5a7573b53fb6b4a3b7025a19a40c8ced23b93d4d80f189f2c9e94360
cd41bc81dba40b782011adcd4359d4ef1af2d6d71a8c1352090d0b95b84d11e6
c619c27a45db86b76aeb4fa3b4fff12783e20a40fe25bab19ea9221a0c08d960
9b0df26bd6ab5c4b0a26a269407bbdbc630c4e2609c1980cb0ab545097325f7e
e2a37bbdfc3f08b166e50cbe89daabc197385a0d7b59e5b5e1ebb4ebff499959
995611f14faec3531defbbce4c39cd0750fc46699850b82adcc11f31de7172e7
1d45ab686016f181b82c4275ea024d2c68bb073cd0121857cad4cf4846c474ea
a4b970ec1c0280cf6ffc7d6baab06338edef2b00e4201a22798d07ade14fdb18
1959db018acab1cc5ff742d66bb6144e2e568491715c19a985e9592dcdcf93ca
4793a61becb8ead82110b7db361bd2ed11c19c9d6dc30c2d5925cdd7c3a688c5
4ceb08129fcabdf4ac51fcfaeb24647d09c1dff6e427f51b90c9d40902e0f0c2
b28e0dc8f1d382f1bc282629fb082321651019a62d9341e9c4be1c415cbd8397
fdca24617d48127d2f21b9d29800c25876beff87dc6cf6677856e4e8787d8bdb
6219c9a746c64ef18236f12a9137511e84c1df56a98d7e030037579b3f34522d
'''.replace(b'\n', b'')

AA = binascii.unhexlify(A)
A = [i for i in AA]

k = struct.unpack("<4L",hex(a).encode('ascii')[:16])
K_REC = [862222384, 825635684, 959788337, 859137081]
SUM_REC = [0,2654435769, 1013904242, 3668340011, 2027808484, 387276957, 3041712726, 1401181199, 4055616968, 2415085441, 774553914, 3428989683, 1788458156, 147926629, 2802362398, 1161830871, 3816266640, 2175735113, 535203586, 3189639355, 1549107828, 4203543597, 2563012070, 922480543, 3576916312, 1936384785, 295853258, 2950289027, 1309757500, 3964193269, 2323661742, 683130215, 3337565984]

for i in range(0,512,8):
    v0,v1 = struct.unpack("<2L",AA[i:i+8])
    sum,mask = SUM_REC[-1],1<<32
    for round in range(32):
        v1 -= (((v0 << 4 ^ v0 >> 5) + v0) ^ (sum + k[sum >> 11 & 3]))
        v1%=mask
        if v1<0:
            v1+=mask
        sum = SUM_REC[-round-2]
        v0 -= (((v1 << 4 ^ v1 >> 5) + v1) ^ (sum + k[sum & 3]))
        v0%=mask
        if v0<0:
            v0+=mask
    e = list(struct.pack("<2L", v0, v1))
    for j in range(8):
        A[i+j] = e[j]

S_REC = [210, 172, 105, 76, 174, 52, 7, 41, 96, 118, 66, 43, 7, 161, 133, 12, 208, 12, 178, 244, 164, 248, 9, 86, 99, 195, 239, 124, 192, 162, 25, 29, 10, 166, 240, 120, 252, 109, 162, 168, 65, 128, 125, 58, 186, 90, 150, 21, 218, 217, 81, 150, 127, 226, 57, 128, 229, 162, 8, 108, 252, 173, 172, 242, 168, 242, 100, 172, 206, 90, 152, 184, 161, 199, 161, 255, 140, 29, 116, 240, 183, 51, 127, 139, 68, 124, 166, 39, 236, 172, 161, 118, 248, 52, 178, 216, 35, 73, 124, 51, 51, 201, 48, 63, 11, 5, 134, 46, 197, 237, 191, 71, 156, 255, 46, 198, 75, 173, 214, 17, 201, 65, 183, 165, 252, 174, 223, 193, 110, 167, 47, 254, 114, 254, 111, 12, 130, 129, 139, 124, 46, 146, 214, 229, 194, 4, 233, 123, 121, 112, 23, 139, 185, 122, 97, 153, 61, 245, 190, 86, 39, 123, 187, 43, 178, 247, 1, 81, 110, 54, 145, 94, 232, 24, 161, 43, 199, 126, 14, 38, 69, 252, 173, 163, 151, 163, 14, 115, 139, 151, 98, 30, 70, 36, 67, 156, 102, 244, 164, 211, 131, 181, 143, 249, 157, 125, 55, 46, 90, 183, 185, 187, 161, 106, 212, 126, 235, 33, 117, 35, 183, 212, 228, 33, 200, 203, 133, 50, 141, 47, 185, 47, 35, 245, 153, 123, 68, 123, 167, 42, 68, 107, 47, 180, 122, 23, 148, 76, 53, 166, 117, 120, 86, 88, 24, 0, 6, 176, 203, 54, 194, 16, 54, 190, 134, 41, 177, 92, 247, 163, 36, 76, 207, 250, 142, 24, 193, 170, 0, 89, 229, 224, 44, 186, 199, 242, 201, 63, 28, 237, 118, 161, 114, 49, 19, 74, 84, 211, 158, 15, 147, 137, 6, 106, 125, 179, 6, 216, 100, 46, 108, 228, 197, 75, 55, 184, 42, 141, 232, 213, 40, 2, 113, 87, 98, 208, 111, 48, 179, 249, 138, 220, 146, 56, 118, 97, 214, 122, 45, 133, 192, 51, 62, 193, 55, 134, 98, 211, 197, 26, 125, 183, 184, 226, 130, 237, 129, 96, 115, 163, 197, 95, 227, 34, 202, 87, 65, 45, 227, 234, 6, 28, 210, 166, 154, 234, 227, 236, 118, 179, 197, 116, 67, 13, 38, 166, 157, 194, 160, 249, 60, 58, 127, 125, 219, 169, 179, 187, 85, 176, 225, 157, 38, 4, 179, 81, 74, 169, 15, 21, 24, 202, 125, 102, 63, 215, 216, 45, 219, 135, 68, 91, 254, 249, 120, 35, 230, 112, 166, 110, 253, 232, 65, 52, 248, 143, 89, 215, 239, 207, 208, 179, 134, 234, 26, 197, 35, 251, 215, 123, 46, 27, 135, 122, 98, 193, 83, 97, 72, 60, 76, 166, 167, 157, 182, 175, 183, 122, 187, 248, 87, 26, 240, 42, 24, 181, 191, 51, 214, 223, 44, 21, 56, 88, 158, 211, 183, 64, 117, 43, 190, 170, 253, 221, 196, 228, 197, 131, 207, 132, 68, 248, 112, 114, 15, 110, 198, 108, 65, 182, 154, 154]

for k in range(512):
    A[k] ^= S_REC[k]

A = int(''.join([hex(i)[2:].rjust(2,'0') for i in A]),16)
phi_b = (a-1)*(init_b-1)
def gcd(a,b):
    while a!=0:
        a,b = b%a,a
    return b

def findModReverse(a,m):
    if gcd(a,m)!=1:
        return None
    u1,u2,u3 = 1,0,a
    v1,v2,v3 = 0,1,m
    while v3!=0:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    return u1%m

rev = findModReverse(65537,phi_b)
A = hex(pow(A,rev,b))[2:]
A = [A[i:i+32] for i in range(0,len(A),32)]

choices = {md5(i) : i for i in string.printable}
for i in range(len(A)):
    A[i] = choices[A[i]]
A = ''.join(A)
print(A)
